// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flease.proto

package ohmdb.flease;

public final class Flease {
  private Flease() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface FleaseRequestMessageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string lease_id = 1;
    /**
     * <code>optional string lease_id = 1;</code>
     *
     * <pre>
     * Message and lease identification for the RPC system
     * </pre>
     */
    boolean hasLeaseId();
    /**
     * <code>optional string lease_id = 1;</code>
     *
     * <pre>
     * Message and lease identification for the RPC system
     * </pre>
     */
    java.lang.String getLeaseId();
    /**
     * <code>optional string lease_id = 1;</code>
     *
     * <pre>
     * Message and lease identification for the RPC system
     * </pre>
     */
    com.google.protobuf.ByteString
        getLeaseIdBytes();

    // optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;
    /**
     * <code>optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;</code>
     *
     * <pre>
     *optional int64         message_id = 2;
     * </pre>
     */
    boolean hasMessageType();
    /**
     * <code>optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;</code>
     *
     * <pre>
     *optional int64         message_id = 2;
     * </pre>
     */
    ohmdb.flease.Flease.FleaseRequestMessage.MessageType getMessageType();

    // optional .ohmdb.flease.BallotNumber k = 4;
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
     *
     * <pre>
     * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
     * </pre>
     */
    boolean hasK();
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
     *
     * <pre>
     * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
     * </pre>
     */
    ohmdb.flease.Flease.BallotNumber getK();
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
     *
     * <pre>
     * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
     * </pre>
     */
    ohmdb.flease.Flease.BallotNumberOrBuilder getKOrBuilder();

    // optional .ohmdb.flease.Lease lease = 5;
    /**
     * <code>optional .ohmdb.flease.Lease lease = 5;</code>
     *
     * <pre>
     * Lease data. Called 'v(i)' in Algorithm 1.
     * Used by WRITE message type only.
     * </pre>
     */
    boolean hasLease();
    /**
     * <code>optional .ohmdb.flease.Lease lease = 5;</code>
     *
     * <pre>
     * Lease data. Called 'v(i)' in Algorithm 1.
     * Used by WRITE message type only.
     * </pre>
     */
    ohmdb.flease.Flease.Lease getLease();
    /**
     * <code>optional .ohmdb.flease.Lease lease = 5;</code>
     *
     * <pre>
     * Lease data. Called 'v(i)' in Algorithm 1.
     * Used by WRITE message type only.
     * </pre>
     */
    ohmdb.flease.Flease.LeaseOrBuilder getLeaseOrBuilder();
  }
  /**
   * Protobuf type {@code ohmdb.flease.FleaseRequestMessage}
   *
   * <pre>
   * Reference flease_paper_ipdps.
   * </pre>
   */
  public static final class FleaseRequestMessage extends
      com.google.protobuf.GeneratedMessage
      implements FleaseRequestMessageOrBuilder {
    // Use FleaseRequestMessage.newBuilder() to construct.
    private FleaseRequestMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FleaseRequestMessage(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FleaseRequestMessage defaultInstance;
    public static FleaseRequestMessage getDefaultInstance() {
      return defaultInstance;
    }

    public FleaseRequestMessage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FleaseRequestMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              leaseId_ = input.readBytes();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              ohmdb.flease.Flease.FleaseRequestMessage.MessageType value = ohmdb.flease.Flease.FleaseRequestMessage.MessageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                messageType_ = value;
              }
              break;
            }
            case 34: {
              ohmdb.flease.Flease.BallotNumber.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = k_.toBuilder();
              }
              k_ = input.readMessage(ohmdb.flease.Flease.BallotNumber.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(k_);
                k_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 42: {
              ohmdb.flease.Flease.Lease.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = lease_.toBuilder();
              }
              lease_ = input.readMessage(ohmdb.flease.Flease.Lease.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lease_);
                lease_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ohmdb.flease.Flease.internal_static_ohmdb_flease_FleaseRequestMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ohmdb.flease.Flease.internal_static_ohmdb_flease_FleaseRequestMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ohmdb.flease.Flease.FleaseRequestMessage.class, ohmdb.flease.Flease.FleaseRequestMessage.Builder.class);
    }

    public static com.google.protobuf.Parser<FleaseRequestMessage> PARSER =
        new com.google.protobuf.AbstractParser<FleaseRequestMessage>() {
      public FleaseRequestMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FleaseRequestMessage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FleaseRequestMessage> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code ohmdb.flease.FleaseRequestMessage.MessageType}
     */
    public enum MessageType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>READ = 0;</code>
       */
      READ(0, 0),
      /**
       * <code>WRITE = 1;</code>
       */
      WRITE(1, 1),
      ;

      /**
       * <code>READ = 0;</code>
       */
      public static final int READ_VALUE = 0;
      /**
       * <code>WRITE = 1;</code>
       */
      public static final int WRITE_VALUE = 1;


      public final int getNumber() { return value; }

      public static MessageType valueOf(int value) {
        switch (value) {
          case 0: return READ;
          case 1: return WRITE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MessageType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
              public MessageType findValueByNumber(int number) {
                return MessageType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ohmdb.flease.Flease.FleaseRequestMessage.getDescriptor().getEnumTypes().get(0);
      }

      private static final MessageType[] VALUES = values();

      public static MessageType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private MessageType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:ohmdb.flease.FleaseRequestMessage.MessageType)
    }

    private int bitField0_;
    // optional string lease_id = 1;
    public static final int LEASE_ID_FIELD_NUMBER = 1;
    private java.lang.Object leaseId_;
    /**
     * <code>optional string lease_id = 1;</code>
     *
     * <pre>
     * Message and lease identification for the RPC system
     * </pre>
     */
    public boolean hasLeaseId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string lease_id = 1;</code>
     *
     * <pre>
     * Message and lease identification for the RPC system
     * </pre>
     */
    public java.lang.String getLeaseId() {
      java.lang.Object ref = leaseId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          leaseId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string lease_id = 1;</code>
     *
     * <pre>
     * Message and lease identification for the RPC system
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLeaseIdBytes() {
      java.lang.Object ref = leaseId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        leaseId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;
    public static final int MESSAGE_TYPE_FIELD_NUMBER = 3;
    private ohmdb.flease.Flease.FleaseRequestMessage.MessageType messageType_;
    /**
     * <code>optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;</code>
     *
     * <pre>
     *optional int64         message_id = 2;
     * </pre>
     */
    public boolean hasMessageType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;</code>
     *
     * <pre>
     *optional int64         message_id = 2;
     * </pre>
     */
    public ohmdb.flease.Flease.FleaseRequestMessage.MessageType getMessageType() {
      return messageType_;
    }

    // optional .ohmdb.flease.BallotNumber k = 4;
    public static final int K_FIELD_NUMBER = 4;
    private ohmdb.flease.Flease.BallotNumber k_;
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
     *
     * <pre>
     * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
     * </pre>
     */
    public boolean hasK() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
     *
     * <pre>
     * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
     * </pre>
     */
    public ohmdb.flease.Flease.BallotNumber getK() {
      return k_;
    }
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
     *
     * <pre>
     * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
     * </pre>
     */
    public ohmdb.flease.Flease.BallotNumberOrBuilder getKOrBuilder() {
      return k_;
    }

    // optional .ohmdb.flease.Lease lease = 5;
    public static final int LEASE_FIELD_NUMBER = 5;
    private ohmdb.flease.Flease.Lease lease_;
    /**
     * <code>optional .ohmdb.flease.Lease lease = 5;</code>
     *
     * <pre>
     * Lease data. Called 'v(i)' in Algorithm 1.
     * Used by WRITE message type only.
     * </pre>
     */
    public boolean hasLease() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .ohmdb.flease.Lease lease = 5;</code>
     *
     * <pre>
     * Lease data. Called 'v(i)' in Algorithm 1.
     * Used by WRITE message type only.
     * </pre>
     */
    public ohmdb.flease.Flease.Lease getLease() {
      return lease_;
    }
    /**
     * <code>optional .ohmdb.flease.Lease lease = 5;</code>
     *
     * <pre>
     * Lease data. Called 'v(i)' in Algorithm 1.
     * Used by WRITE message type only.
     * </pre>
     */
    public ohmdb.flease.Flease.LeaseOrBuilder getLeaseOrBuilder() {
      return lease_;
    }

    private void initFields() {
      leaseId_ = "";
      messageType_ = ohmdb.flease.Flease.FleaseRequestMessage.MessageType.READ;
      k_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
      lease_ = ohmdb.flease.Flease.Lease.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getLeaseIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(3, messageType_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, k_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, lease_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getLeaseIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, messageType_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, k_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, lease_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ohmdb.flease.Flease.FleaseRequestMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ohmdb.flease.Flease.FleaseRequestMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ohmdb.flease.Flease.FleaseRequestMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ohmdb.flease.Flease.FleaseRequestMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ohmdb.flease.Flease.FleaseRequestMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ohmdb.flease.Flease.FleaseRequestMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ohmdb.flease.Flease.FleaseRequestMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ohmdb.flease.Flease.FleaseRequestMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ohmdb.flease.Flease.FleaseRequestMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ohmdb.flease.Flease.FleaseRequestMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ohmdb.flease.Flease.FleaseRequestMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ohmdb.flease.FleaseRequestMessage}
     *
     * <pre>
     * Reference flease_paper_ipdps.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ohmdb.flease.Flease.FleaseRequestMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_FleaseRequestMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_FleaseRequestMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ohmdb.flease.Flease.FleaseRequestMessage.class, ohmdb.flease.Flease.FleaseRequestMessage.Builder.class);
      }

      // Construct using ohmdb.flease.Flease.FleaseRequestMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getKFieldBuilder();
          getLeaseFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        leaseId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        messageType_ = ohmdb.flease.Flease.FleaseRequestMessage.MessageType.READ;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (kBuilder_ == null) {
          k_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
        } else {
          kBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (leaseBuilder_ == null) {
          lease_ = ohmdb.flease.Flease.Lease.getDefaultInstance();
        } else {
          leaseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_FleaseRequestMessage_descriptor;
      }

      public ohmdb.flease.Flease.FleaseRequestMessage getDefaultInstanceForType() {
        return ohmdb.flease.Flease.FleaseRequestMessage.getDefaultInstance();
      }

      public ohmdb.flease.Flease.FleaseRequestMessage build() {
        ohmdb.flease.Flease.FleaseRequestMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ohmdb.flease.Flease.FleaseRequestMessage buildPartial() {
        ohmdb.flease.Flease.FleaseRequestMessage result = new ohmdb.flease.Flease.FleaseRequestMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.leaseId_ = leaseId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.messageType_ = messageType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (kBuilder_ == null) {
          result.k_ = k_;
        } else {
          result.k_ = kBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (leaseBuilder_ == null) {
          result.lease_ = lease_;
        } else {
          result.lease_ = leaseBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ohmdb.flease.Flease.FleaseRequestMessage) {
          return mergeFrom((ohmdb.flease.Flease.FleaseRequestMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ohmdb.flease.Flease.FleaseRequestMessage other) {
        if (other == ohmdb.flease.Flease.FleaseRequestMessage.getDefaultInstance()) return this;
        if (other.hasLeaseId()) {
          bitField0_ |= 0x00000001;
          leaseId_ = other.leaseId_;
          onChanged();
        }
        if (other.hasMessageType()) {
          setMessageType(other.getMessageType());
        }
        if (other.hasK()) {
          mergeK(other.getK());
        }
        if (other.hasLease()) {
          mergeLease(other.getLease());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ohmdb.flease.Flease.FleaseRequestMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ohmdb.flease.Flease.FleaseRequestMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string lease_id = 1;
      private java.lang.Object leaseId_ = "";
      /**
       * <code>optional string lease_id = 1;</code>
       *
       * <pre>
       * Message and lease identification for the RPC system
       * </pre>
       */
      public boolean hasLeaseId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string lease_id = 1;</code>
       *
       * <pre>
       * Message and lease identification for the RPC system
       * </pre>
       */
      public java.lang.String getLeaseId() {
        java.lang.Object ref = leaseId_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          leaseId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string lease_id = 1;</code>
       *
       * <pre>
       * Message and lease identification for the RPC system
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLeaseIdBytes() {
        java.lang.Object ref = leaseId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          leaseId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string lease_id = 1;</code>
       *
       * <pre>
       * Message and lease identification for the RPC system
       * </pre>
       */
      public Builder setLeaseId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        leaseId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string lease_id = 1;</code>
       *
       * <pre>
       * Message and lease identification for the RPC system
       * </pre>
       */
      public Builder clearLeaseId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        leaseId_ = getDefaultInstance().getLeaseId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string lease_id = 1;</code>
       *
       * <pre>
       * Message and lease identification for the RPC system
       * </pre>
       */
      public Builder setLeaseIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        leaseId_ = value;
        onChanged();
        return this;
      }

      // optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;
      private ohmdb.flease.Flease.FleaseRequestMessage.MessageType messageType_ = ohmdb.flease.Flease.FleaseRequestMessage.MessageType.READ;
      /**
       * <code>optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;</code>
       *
       * <pre>
       *optional int64         message_id = 2;
       * </pre>
       */
      public boolean hasMessageType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;</code>
       *
       * <pre>
       *optional int64         message_id = 2;
       * </pre>
       */
      public ohmdb.flease.Flease.FleaseRequestMessage.MessageType getMessageType() {
        return messageType_;
      }
      /**
       * <code>optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;</code>
       *
       * <pre>
       *optional int64         message_id = 2;
       * </pre>
       */
      public Builder setMessageType(ohmdb.flease.Flease.FleaseRequestMessage.MessageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        messageType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.FleaseRequestMessage.MessageType message_type = 3;</code>
       *
       * <pre>
       *optional int64         message_id = 2;
       * </pre>
       */
      public Builder clearMessageType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        messageType_ = ohmdb.flease.Flease.FleaseRequestMessage.MessageType.READ;
        onChanged();
        return this;
      }

      // optional .ohmdb.flease.BallotNumber k = 4;
      private ohmdb.flease.Flease.BallotNumber k_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ohmdb.flease.Flease.BallotNumber, ohmdb.flease.Flease.BallotNumber.Builder, ohmdb.flease.Flease.BallotNumberOrBuilder> kBuilder_;
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
       *
       * <pre>
       * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
       * </pre>
       */
      public boolean hasK() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
       *
       * <pre>
       * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
       * </pre>
       */
      public ohmdb.flease.Flease.BallotNumber getK() {
        if (kBuilder_ == null) {
          return k_;
        } else {
          return kBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
       *
       * <pre>
       * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
       * </pre>
       */
      public Builder setK(ohmdb.flease.Flease.BallotNumber value) {
        if (kBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          k_ = value;
          onChanged();
        } else {
          kBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
       *
       * <pre>
       * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
       * </pre>
       */
      public Builder setK(
          ohmdb.flease.Flease.BallotNumber.Builder builderForValue) {
        if (kBuilder_ == null) {
          k_ = builderForValue.build();
          onChanged();
        } else {
          kBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
       *
       * <pre>
       * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
       * </pre>
       */
      public Builder mergeK(ohmdb.flease.Flease.BallotNumber value) {
        if (kBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              k_ != ohmdb.flease.Flease.BallotNumber.getDefaultInstance()) {
            k_ =
              ohmdb.flease.Flease.BallotNumber.newBuilder(k_).mergeFrom(value).buildPartial();
          } else {
            k_ = value;
          }
          onChanged();
        } else {
          kBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
       *
       * <pre>
       * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
       * </pre>
       */
      public Builder clearK() {
        if (kBuilder_ == null) {
          k_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
          onChanged();
        } else {
          kBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
       *
       * <pre>
       * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
       * </pre>
       */
      public ohmdb.flease.Flease.BallotNumber.Builder getKBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getKFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
       *
       * <pre>
       * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
       * </pre>
       */
      public ohmdb.flease.Flease.BallotNumberOrBuilder getKOrBuilder() {
        if (kBuilder_ != null) {
          return kBuilder_.getMessageOrBuilder();
        } else {
          return k_;
        }
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 4;</code>
       *
       * <pre>
       * Ballot number, aka 'k' in Algorithm 1.  Used by READ and WRITE messages
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ohmdb.flease.Flease.BallotNumber, ohmdb.flease.Flease.BallotNumber.Builder, ohmdb.flease.Flease.BallotNumberOrBuilder> 
          getKFieldBuilder() {
        if (kBuilder_ == null) {
          kBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ohmdb.flease.Flease.BallotNumber, ohmdb.flease.Flease.BallotNumber.Builder, ohmdb.flease.Flease.BallotNumberOrBuilder>(
                  k_,
                  getParentForChildren(),
                  isClean());
          k_ = null;
        }
        return kBuilder_;
      }

      // optional .ohmdb.flease.Lease lease = 5;
      private ohmdb.flease.Flease.Lease lease_ = ohmdb.flease.Flease.Lease.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ohmdb.flease.Flease.Lease, ohmdb.flease.Flease.Lease.Builder, ohmdb.flease.Flease.LeaseOrBuilder> leaseBuilder_;
      /**
       * <code>optional .ohmdb.flease.Lease lease = 5;</code>
       *
       * <pre>
       * Lease data. Called 'v(i)' in Algorithm 1.
       * Used by WRITE message type only.
       * </pre>
       */
      public boolean hasLease() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 5;</code>
       *
       * <pre>
       * Lease data. Called 'v(i)' in Algorithm 1.
       * Used by WRITE message type only.
       * </pre>
       */
      public ohmdb.flease.Flease.Lease getLease() {
        if (leaseBuilder_ == null) {
          return lease_;
        } else {
          return leaseBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 5;</code>
       *
       * <pre>
       * Lease data. Called 'v(i)' in Algorithm 1.
       * Used by WRITE message type only.
       * </pre>
       */
      public Builder setLease(ohmdb.flease.Flease.Lease value) {
        if (leaseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lease_ = value;
          onChanged();
        } else {
          leaseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 5;</code>
       *
       * <pre>
       * Lease data. Called 'v(i)' in Algorithm 1.
       * Used by WRITE message type only.
       * </pre>
       */
      public Builder setLease(
          ohmdb.flease.Flease.Lease.Builder builderForValue) {
        if (leaseBuilder_ == null) {
          lease_ = builderForValue.build();
          onChanged();
        } else {
          leaseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 5;</code>
       *
       * <pre>
       * Lease data. Called 'v(i)' in Algorithm 1.
       * Used by WRITE message type only.
       * </pre>
       */
      public Builder mergeLease(ohmdb.flease.Flease.Lease value) {
        if (leaseBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              lease_ != ohmdb.flease.Flease.Lease.getDefaultInstance()) {
            lease_ =
              ohmdb.flease.Flease.Lease.newBuilder(lease_).mergeFrom(value).buildPartial();
          } else {
            lease_ = value;
          }
          onChanged();
        } else {
          leaseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 5;</code>
       *
       * <pre>
       * Lease data. Called 'v(i)' in Algorithm 1.
       * Used by WRITE message type only.
       * </pre>
       */
      public Builder clearLease() {
        if (leaseBuilder_ == null) {
          lease_ = ohmdb.flease.Flease.Lease.getDefaultInstance();
          onChanged();
        } else {
          leaseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 5;</code>
       *
       * <pre>
       * Lease data. Called 'v(i)' in Algorithm 1.
       * Used by WRITE message type only.
       * </pre>
       */
      public ohmdb.flease.Flease.Lease.Builder getLeaseBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getLeaseFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 5;</code>
       *
       * <pre>
       * Lease data. Called 'v(i)' in Algorithm 1.
       * Used by WRITE message type only.
       * </pre>
       */
      public ohmdb.flease.Flease.LeaseOrBuilder getLeaseOrBuilder() {
        if (leaseBuilder_ != null) {
          return leaseBuilder_.getMessageOrBuilder();
        } else {
          return lease_;
        }
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 5;</code>
       *
       * <pre>
       * Lease data. Called 'v(i)' in Algorithm 1.
       * Used by WRITE message type only.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ohmdb.flease.Flease.Lease, ohmdb.flease.Flease.Lease.Builder, ohmdb.flease.Flease.LeaseOrBuilder> 
          getLeaseFieldBuilder() {
        if (leaseBuilder_ == null) {
          leaseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ohmdb.flease.Flease.Lease, ohmdb.flease.Flease.Lease.Builder, ohmdb.flease.Flease.LeaseOrBuilder>(
                  lease_,
                  getParentForChildren(),
                  isClean());
          lease_ = null;
        }
        return leaseBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:ohmdb.flease.FleaseRequestMessage)
    }

    static {
      defaultInstance = new FleaseRequestMessage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ohmdb.flease.FleaseRequestMessage)
  }

  public interface FleaseReplyMessageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string lease_id = 1;
    /**
     * <code>optional string lease_id = 1;</code>
     */
    boolean hasLeaseId();
    /**
     * <code>optional string lease_id = 1;</code>
     */
    java.lang.String getLeaseId();
    /**
     * <code>optional string lease_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getLeaseIdBytes();

    // optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;
    /**
     * <code>optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;</code>
     *
     * <pre>
     *optional int64          message_in_reply_to = 2;
     * </pre>
     */
    boolean hasMessageType();
    /**
     * <code>optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;</code>
     *
     * <pre>
     *optional int64          message_in_reply_to = 2;
     * </pre>
     */
    ohmdb.flease.Flease.FleaseReplyMessage.MessageType getMessageType();

    // optional .ohmdb.flease.Lease lease = 4;
    /**
     * <code>optional .ohmdb.flease.Lease lease = 4;</code>
     *
     * <pre>
     * Used by ackREAD message only.
     * </pre>
     */
    boolean hasLease();
    /**
     * <code>optional .ohmdb.flease.Lease lease = 4;</code>
     *
     * <pre>
     * Used by ackREAD message only.
     * </pre>
     */
    ohmdb.flease.Flease.Lease getLease();
    /**
     * <code>optional .ohmdb.flease.Lease lease = 4;</code>
     *
     * <pre>
     * Used by ackREAD message only.
     * </pre>
     */
    ohmdb.flease.Flease.LeaseOrBuilder getLeaseOrBuilder();

    // optional .ohmdb.flease.BallotNumber k = 5;
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
     *
     * <pre>
     * Used by all message types
     * </pre>
     */
    boolean hasK();
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
     *
     * <pre>
     * Used by all message types
     * </pre>
     */
    ohmdb.flease.Flease.BallotNumber getK();
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
     *
     * <pre>
     * Used by all message types
     * </pre>
     */
    ohmdb.flease.Flease.BallotNumberOrBuilder getKOrBuilder();

    // optional .ohmdb.flease.BallotNumber kprime = 6;
    /**
     * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
     *
     * <pre>
     * Used by ackREAD message type only!
     * </pre>
     */
    boolean hasKprime();
    /**
     * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
     *
     * <pre>
     * Used by ackREAD message type only!
     * </pre>
     */
    ohmdb.flease.Flease.BallotNumber getKprime();
    /**
     * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
     *
     * <pre>
     * Used by ackREAD message type only!
     * </pre>
     */
    ohmdb.flease.Flease.BallotNumberOrBuilder getKprimeOrBuilder();
  }
  /**
   * Protobuf type {@code ohmdb.flease.FleaseReplyMessage}
   */
  public static final class FleaseReplyMessage extends
      com.google.protobuf.GeneratedMessage
      implements FleaseReplyMessageOrBuilder {
    // Use FleaseReplyMessage.newBuilder() to construct.
    private FleaseReplyMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FleaseReplyMessage(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FleaseReplyMessage defaultInstance;
    public static FleaseReplyMessage getDefaultInstance() {
      return defaultInstance;
    }

    public FleaseReplyMessage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FleaseReplyMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              leaseId_ = input.readBytes();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              ohmdb.flease.Flease.FleaseReplyMessage.MessageType value = ohmdb.flease.Flease.FleaseReplyMessage.MessageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                messageType_ = value;
              }
              break;
            }
            case 34: {
              ohmdb.flease.Flease.Lease.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = lease_.toBuilder();
              }
              lease_ = input.readMessage(ohmdb.flease.Flease.Lease.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lease_);
                lease_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 42: {
              ohmdb.flease.Flease.BallotNumber.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = k_.toBuilder();
              }
              k_ = input.readMessage(ohmdb.flease.Flease.BallotNumber.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(k_);
                k_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 50: {
              ohmdb.flease.Flease.BallotNumber.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = kprime_.toBuilder();
              }
              kprime_ = input.readMessage(ohmdb.flease.Flease.BallotNumber.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(kprime_);
                kprime_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ohmdb.flease.Flease.internal_static_ohmdb_flease_FleaseReplyMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ohmdb.flease.Flease.internal_static_ohmdb_flease_FleaseReplyMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ohmdb.flease.Flease.FleaseReplyMessage.class, ohmdb.flease.Flease.FleaseReplyMessage.Builder.class);
    }

    public static com.google.protobuf.Parser<FleaseReplyMessage> PARSER =
        new com.google.protobuf.AbstractParser<FleaseReplyMessage>() {
      public FleaseReplyMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FleaseReplyMessage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FleaseReplyMessage> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code ohmdb.flease.FleaseReplyMessage.MessageType}
     */
    public enum MessageType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ackREAD = 1;</code>
       */
      ackREAD(0, 1),
      /**
       * <code>nackREAD = 2;</code>
       */
      nackREAD(1, 2),
      /**
       * <code>ackWRITE = 3;</code>
       */
      ackWRITE(2, 3),
      /**
       * <code>nackWRITE = 4;</code>
       */
      nackWRITE(3, 4),
      ;

      /**
       * <code>ackREAD = 1;</code>
       */
      public static final int ackREAD_VALUE = 1;
      /**
       * <code>nackREAD = 2;</code>
       */
      public static final int nackREAD_VALUE = 2;
      /**
       * <code>ackWRITE = 3;</code>
       */
      public static final int ackWRITE_VALUE = 3;
      /**
       * <code>nackWRITE = 4;</code>
       */
      public static final int nackWRITE_VALUE = 4;


      public final int getNumber() { return value; }

      public static MessageType valueOf(int value) {
        switch (value) {
          case 1: return ackREAD;
          case 2: return nackREAD;
          case 3: return ackWRITE;
          case 4: return nackWRITE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MessageType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
              public MessageType findValueByNumber(int number) {
                return MessageType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ohmdb.flease.Flease.FleaseReplyMessage.getDescriptor().getEnumTypes().get(0);
      }

      private static final MessageType[] VALUES = values();

      public static MessageType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private MessageType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:ohmdb.flease.FleaseReplyMessage.MessageType)
    }

    private int bitField0_;
    // optional string lease_id = 1;
    public static final int LEASE_ID_FIELD_NUMBER = 1;
    private java.lang.Object leaseId_;
    /**
     * <code>optional string lease_id = 1;</code>
     */
    public boolean hasLeaseId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string lease_id = 1;</code>
     */
    public java.lang.String getLeaseId() {
      java.lang.Object ref = leaseId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          leaseId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string lease_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getLeaseIdBytes() {
      java.lang.Object ref = leaseId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        leaseId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;
    public static final int MESSAGE_TYPE_FIELD_NUMBER = 3;
    private ohmdb.flease.Flease.FleaseReplyMessage.MessageType messageType_;
    /**
     * <code>optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;</code>
     *
     * <pre>
     *optional int64          message_in_reply_to = 2;
     * </pre>
     */
    public boolean hasMessageType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;</code>
     *
     * <pre>
     *optional int64          message_in_reply_to = 2;
     * </pre>
     */
    public ohmdb.flease.Flease.FleaseReplyMessage.MessageType getMessageType() {
      return messageType_;
    }

    // optional .ohmdb.flease.Lease lease = 4;
    public static final int LEASE_FIELD_NUMBER = 4;
    private ohmdb.flease.Flease.Lease lease_;
    /**
     * <code>optional .ohmdb.flease.Lease lease = 4;</code>
     *
     * <pre>
     * Used by ackREAD message only.
     * </pre>
     */
    public boolean hasLease() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .ohmdb.flease.Lease lease = 4;</code>
     *
     * <pre>
     * Used by ackREAD message only.
     * </pre>
     */
    public ohmdb.flease.Flease.Lease getLease() {
      return lease_;
    }
    /**
     * <code>optional .ohmdb.flease.Lease lease = 4;</code>
     *
     * <pre>
     * Used by ackREAD message only.
     * </pre>
     */
    public ohmdb.flease.Flease.LeaseOrBuilder getLeaseOrBuilder() {
      return lease_;
    }

    // optional .ohmdb.flease.BallotNumber k = 5;
    public static final int K_FIELD_NUMBER = 5;
    private ohmdb.flease.Flease.BallotNumber k_;
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
     *
     * <pre>
     * Used by all message types
     * </pre>
     */
    public boolean hasK() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
     *
     * <pre>
     * Used by all message types
     * </pre>
     */
    public ohmdb.flease.Flease.BallotNumber getK() {
      return k_;
    }
    /**
     * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
     *
     * <pre>
     * Used by all message types
     * </pre>
     */
    public ohmdb.flease.Flease.BallotNumberOrBuilder getKOrBuilder() {
      return k_;
    }

    // optional .ohmdb.flease.BallotNumber kprime = 6;
    public static final int KPRIME_FIELD_NUMBER = 6;
    private ohmdb.flease.Flease.BallotNumber kprime_;
    /**
     * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
     *
     * <pre>
     * Used by ackREAD message type only!
     * </pre>
     */
    public boolean hasKprime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
     *
     * <pre>
     * Used by ackREAD message type only!
     * </pre>
     */
    public ohmdb.flease.Flease.BallotNumber getKprime() {
      return kprime_;
    }
    /**
     * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
     *
     * <pre>
     * Used by ackREAD message type only!
     * </pre>
     */
    public ohmdb.flease.Flease.BallotNumberOrBuilder getKprimeOrBuilder() {
      return kprime_;
    }

    private void initFields() {
      leaseId_ = "";
      messageType_ = ohmdb.flease.Flease.FleaseReplyMessage.MessageType.ackREAD;
      lease_ = ohmdb.flease.Flease.Lease.getDefaultInstance();
      k_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
      kprime_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getLeaseIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(3, messageType_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, lease_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, k_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(6, kprime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getLeaseIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, messageType_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, lease_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, k_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, kprime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ohmdb.flease.Flease.FleaseReplyMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ohmdb.flease.Flease.FleaseReplyMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ohmdb.flease.Flease.FleaseReplyMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ohmdb.flease.Flease.FleaseReplyMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ohmdb.flease.Flease.FleaseReplyMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ohmdb.flease.Flease.FleaseReplyMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ohmdb.flease.Flease.FleaseReplyMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ohmdb.flease.Flease.FleaseReplyMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ohmdb.flease.Flease.FleaseReplyMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ohmdb.flease.Flease.FleaseReplyMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ohmdb.flease.Flease.FleaseReplyMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ohmdb.flease.FleaseReplyMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ohmdb.flease.Flease.FleaseReplyMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_FleaseReplyMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_FleaseReplyMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ohmdb.flease.Flease.FleaseReplyMessage.class, ohmdb.flease.Flease.FleaseReplyMessage.Builder.class);
      }

      // Construct using ohmdb.flease.Flease.FleaseReplyMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLeaseFieldBuilder();
          getKFieldBuilder();
          getKprimeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        leaseId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        messageType_ = ohmdb.flease.Flease.FleaseReplyMessage.MessageType.ackREAD;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (leaseBuilder_ == null) {
          lease_ = ohmdb.flease.Flease.Lease.getDefaultInstance();
        } else {
          leaseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (kBuilder_ == null) {
          k_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
        } else {
          kBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (kprimeBuilder_ == null) {
          kprime_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
        } else {
          kprimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_FleaseReplyMessage_descriptor;
      }

      public ohmdb.flease.Flease.FleaseReplyMessage getDefaultInstanceForType() {
        return ohmdb.flease.Flease.FleaseReplyMessage.getDefaultInstance();
      }

      public ohmdb.flease.Flease.FleaseReplyMessage build() {
        ohmdb.flease.Flease.FleaseReplyMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ohmdb.flease.Flease.FleaseReplyMessage buildPartial() {
        ohmdb.flease.Flease.FleaseReplyMessage result = new ohmdb.flease.Flease.FleaseReplyMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.leaseId_ = leaseId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.messageType_ = messageType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (leaseBuilder_ == null) {
          result.lease_ = lease_;
        } else {
          result.lease_ = leaseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (kBuilder_ == null) {
          result.k_ = k_;
        } else {
          result.k_ = kBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (kprimeBuilder_ == null) {
          result.kprime_ = kprime_;
        } else {
          result.kprime_ = kprimeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ohmdb.flease.Flease.FleaseReplyMessage) {
          return mergeFrom((ohmdb.flease.Flease.FleaseReplyMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ohmdb.flease.Flease.FleaseReplyMessage other) {
        if (other == ohmdb.flease.Flease.FleaseReplyMessage.getDefaultInstance()) return this;
        if (other.hasLeaseId()) {
          bitField0_ |= 0x00000001;
          leaseId_ = other.leaseId_;
          onChanged();
        }
        if (other.hasMessageType()) {
          setMessageType(other.getMessageType());
        }
        if (other.hasLease()) {
          mergeLease(other.getLease());
        }
        if (other.hasK()) {
          mergeK(other.getK());
        }
        if (other.hasKprime()) {
          mergeKprime(other.getKprime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ohmdb.flease.Flease.FleaseReplyMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ohmdb.flease.Flease.FleaseReplyMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string lease_id = 1;
      private java.lang.Object leaseId_ = "";
      /**
       * <code>optional string lease_id = 1;</code>
       */
      public boolean hasLeaseId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string lease_id = 1;</code>
       */
      public java.lang.String getLeaseId() {
        java.lang.Object ref = leaseId_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          leaseId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string lease_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getLeaseIdBytes() {
        java.lang.Object ref = leaseId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          leaseId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string lease_id = 1;</code>
       */
      public Builder setLeaseId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        leaseId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string lease_id = 1;</code>
       */
      public Builder clearLeaseId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        leaseId_ = getDefaultInstance().getLeaseId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string lease_id = 1;</code>
       */
      public Builder setLeaseIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        leaseId_ = value;
        onChanged();
        return this;
      }

      // optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;
      private ohmdb.flease.Flease.FleaseReplyMessage.MessageType messageType_ = ohmdb.flease.Flease.FleaseReplyMessage.MessageType.ackREAD;
      /**
       * <code>optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;</code>
       *
       * <pre>
       *optional int64          message_in_reply_to = 2;
       * </pre>
       */
      public boolean hasMessageType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;</code>
       *
       * <pre>
       *optional int64          message_in_reply_to = 2;
       * </pre>
       */
      public ohmdb.flease.Flease.FleaseReplyMessage.MessageType getMessageType() {
        return messageType_;
      }
      /**
       * <code>optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;</code>
       *
       * <pre>
       *optional int64          message_in_reply_to = 2;
       * </pre>
       */
      public Builder setMessageType(ohmdb.flease.Flease.FleaseReplyMessage.MessageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        messageType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.FleaseReplyMessage.MessageType message_type = 3;</code>
       *
       * <pre>
       *optional int64          message_in_reply_to = 2;
       * </pre>
       */
      public Builder clearMessageType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        messageType_ = ohmdb.flease.Flease.FleaseReplyMessage.MessageType.ackREAD;
        onChanged();
        return this;
      }

      // optional .ohmdb.flease.Lease lease = 4;
      private ohmdb.flease.Flease.Lease lease_ = ohmdb.flease.Flease.Lease.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ohmdb.flease.Flease.Lease, ohmdb.flease.Flease.Lease.Builder, ohmdb.flease.Flease.LeaseOrBuilder> leaseBuilder_;
      /**
       * <code>optional .ohmdb.flease.Lease lease = 4;</code>
       *
       * <pre>
       * Used by ackREAD message only.
       * </pre>
       */
      public boolean hasLease() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 4;</code>
       *
       * <pre>
       * Used by ackREAD message only.
       * </pre>
       */
      public ohmdb.flease.Flease.Lease getLease() {
        if (leaseBuilder_ == null) {
          return lease_;
        } else {
          return leaseBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 4;</code>
       *
       * <pre>
       * Used by ackREAD message only.
       * </pre>
       */
      public Builder setLease(ohmdb.flease.Flease.Lease value) {
        if (leaseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lease_ = value;
          onChanged();
        } else {
          leaseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 4;</code>
       *
       * <pre>
       * Used by ackREAD message only.
       * </pre>
       */
      public Builder setLease(
          ohmdb.flease.Flease.Lease.Builder builderForValue) {
        if (leaseBuilder_ == null) {
          lease_ = builderForValue.build();
          onChanged();
        } else {
          leaseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 4;</code>
       *
       * <pre>
       * Used by ackREAD message only.
       * </pre>
       */
      public Builder mergeLease(ohmdb.flease.Flease.Lease value) {
        if (leaseBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              lease_ != ohmdb.flease.Flease.Lease.getDefaultInstance()) {
            lease_ =
              ohmdb.flease.Flease.Lease.newBuilder(lease_).mergeFrom(value).buildPartial();
          } else {
            lease_ = value;
          }
          onChanged();
        } else {
          leaseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 4;</code>
       *
       * <pre>
       * Used by ackREAD message only.
       * </pre>
       */
      public Builder clearLease() {
        if (leaseBuilder_ == null) {
          lease_ = ohmdb.flease.Flease.Lease.getDefaultInstance();
          onChanged();
        } else {
          leaseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 4;</code>
       *
       * <pre>
       * Used by ackREAD message only.
       * </pre>
       */
      public ohmdb.flease.Flease.Lease.Builder getLeaseBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getLeaseFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 4;</code>
       *
       * <pre>
       * Used by ackREAD message only.
       * </pre>
       */
      public ohmdb.flease.Flease.LeaseOrBuilder getLeaseOrBuilder() {
        if (leaseBuilder_ != null) {
          return leaseBuilder_.getMessageOrBuilder();
        } else {
          return lease_;
        }
      }
      /**
       * <code>optional .ohmdb.flease.Lease lease = 4;</code>
       *
       * <pre>
       * Used by ackREAD message only.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ohmdb.flease.Flease.Lease, ohmdb.flease.Flease.Lease.Builder, ohmdb.flease.Flease.LeaseOrBuilder> 
          getLeaseFieldBuilder() {
        if (leaseBuilder_ == null) {
          leaseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ohmdb.flease.Flease.Lease, ohmdb.flease.Flease.Lease.Builder, ohmdb.flease.Flease.LeaseOrBuilder>(
                  lease_,
                  getParentForChildren(),
                  isClean());
          lease_ = null;
        }
        return leaseBuilder_;
      }

      // optional .ohmdb.flease.BallotNumber k = 5;
      private ohmdb.flease.Flease.BallotNumber k_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ohmdb.flease.Flease.BallotNumber, ohmdb.flease.Flease.BallotNumber.Builder, ohmdb.flease.Flease.BallotNumberOrBuilder> kBuilder_;
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
       *
       * <pre>
       * Used by all message types
       * </pre>
       */
      public boolean hasK() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
       *
       * <pre>
       * Used by all message types
       * </pre>
       */
      public ohmdb.flease.Flease.BallotNumber getK() {
        if (kBuilder_ == null) {
          return k_;
        } else {
          return kBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
       *
       * <pre>
       * Used by all message types
       * </pre>
       */
      public Builder setK(ohmdb.flease.Flease.BallotNumber value) {
        if (kBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          k_ = value;
          onChanged();
        } else {
          kBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
       *
       * <pre>
       * Used by all message types
       * </pre>
       */
      public Builder setK(
          ohmdb.flease.Flease.BallotNumber.Builder builderForValue) {
        if (kBuilder_ == null) {
          k_ = builderForValue.build();
          onChanged();
        } else {
          kBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
       *
       * <pre>
       * Used by all message types
       * </pre>
       */
      public Builder mergeK(ohmdb.flease.Flease.BallotNumber value) {
        if (kBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              k_ != ohmdb.flease.Flease.BallotNumber.getDefaultInstance()) {
            k_ =
              ohmdb.flease.Flease.BallotNumber.newBuilder(k_).mergeFrom(value).buildPartial();
          } else {
            k_ = value;
          }
          onChanged();
        } else {
          kBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
       *
       * <pre>
       * Used by all message types
       * </pre>
       */
      public Builder clearK() {
        if (kBuilder_ == null) {
          k_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
          onChanged();
        } else {
          kBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
       *
       * <pre>
       * Used by all message types
       * </pre>
       */
      public ohmdb.flease.Flease.BallotNumber.Builder getKBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getKFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
       *
       * <pre>
       * Used by all message types
       * </pre>
       */
      public ohmdb.flease.Flease.BallotNumberOrBuilder getKOrBuilder() {
        if (kBuilder_ != null) {
          return kBuilder_.getMessageOrBuilder();
        } else {
          return k_;
        }
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber k = 5;</code>
       *
       * <pre>
       * Used by all message types
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ohmdb.flease.Flease.BallotNumber, ohmdb.flease.Flease.BallotNumber.Builder, ohmdb.flease.Flease.BallotNumberOrBuilder> 
          getKFieldBuilder() {
        if (kBuilder_ == null) {
          kBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ohmdb.flease.Flease.BallotNumber, ohmdb.flease.Flease.BallotNumber.Builder, ohmdb.flease.Flease.BallotNumberOrBuilder>(
                  k_,
                  getParentForChildren(),
                  isClean());
          k_ = null;
        }
        return kBuilder_;
      }

      // optional .ohmdb.flease.BallotNumber kprime = 6;
      private ohmdb.flease.Flease.BallotNumber kprime_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ohmdb.flease.Flease.BallotNumber, ohmdb.flease.Flease.BallotNumber.Builder, ohmdb.flease.Flease.BallotNumberOrBuilder> kprimeBuilder_;
      /**
       * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
       *
       * <pre>
       * Used by ackREAD message type only!
       * </pre>
       */
      public boolean hasKprime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
       *
       * <pre>
       * Used by ackREAD message type only!
       * </pre>
       */
      public ohmdb.flease.Flease.BallotNumber getKprime() {
        if (kprimeBuilder_ == null) {
          return kprime_;
        } else {
          return kprimeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
       *
       * <pre>
       * Used by ackREAD message type only!
       * </pre>
       */
      public Builder setKprime(ohmdb.flease.Flease.BallotNumber value) {
        if (kprimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kprime_ = value;
          onChanged();
        } else {
          kprimeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
       *
       * <pre>
       * Used by ackREAD message type only!
       * </pre>
       */
      public Builder setKprime(
          ohmdb.flease.Flease.BallotNumber.Builder builderForValue) {
        if (kprimeBuilder_ == null) {
          kprime_ = builderForValue.build();
          onChanged();
        } else {
          kprimeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
       *
       * <pre>
       * Used by ackREAD message type only!
       * </pre>
       */
      public Builder mergeKprime(ohmdb.flease.Flease.BallotNumber value) {
        if (kprimeBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              kprime_ != ohmdb.flease.Flease.BallotNumber.getDefaultInstance()) {
            kprime_ =
              ohmdb.flease.Flease.BallotNumber.newBuilder(kprime_).mergeFrom(value).buildPartial();
          } else {
            kprime_ = value;
          }
          onChanged();
        } else {
          kprimeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
       *
       * <pre>
       * Used by ackREAD message type only!
       * </pre>
       */
      public Builder clearKprime() {
        if (kprimeBuilder_ == null) {
          kprime_ = ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
          onChanged();
        } else {
          kprimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
       *
       * <pre>
       * Used by ackREAD message type only!
       * </pre>
       */
      public ohmdb.flease.Flease.BallotNumber.Builder getKprimeBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getKprimeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
       *
       * <pre>
       * Used by ackREAD message type only!
       * </pre>
       */
      public ohmdb.flease.Flease.BallotNumberOrBuilder getKprimeOrBuilder() {
        if (kprimeBuilder_ != null) {
          return kprimeBuilder_.getMessageOrBuilder();
        } else {
          return kprime_;
        }
      }
      /**
       * <code>optional .ohmdb.flease.BallotNumber kprime = 6;</code>
       *
       * <pre>
       * Used by ackREAD message type only!
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ohmdb.flease.Flease.BallotNumber, ohmdb.flease.Flease.BallotNumber.Builder, ohmdb.flease.Flease.BallotNumberOrBuilder> 
          getKprimeFieldBuilder() {
        if (kprimeBuilder_ == null) {
          kprimeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ohmdb.flease.Flease.BallotNumber, ohmdb.flease.Flease.BallotNumber.Builder, ohmdb.flease.Flease.BallotNumberOrBuilder>(
                  kprime_,
                  getParentForChildren(),
                  isClean());
          kprime_ = null;
        }
        return kprimeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:ohmdb.flease.FleaseReplyMessage)
    }

    static {
      defaultInstance = new FleaseReplyMessage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ohmdb.flease.FleaseReplyMessage)
  }

  public interface LeaseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int64 lease_expiry = 1;
    /**
     * <code>optional int64 lease_expiry = 1;</code>
     *
     * <pre>
     * The millis time which this lease expires at.
     * </pre>
     */
    boolean hasLeaseExpiry();
    /**
     * <code>optional int64 lease_expiry = 1;</code>
     *
     * <pre>
     * The millis time which this lease expires at.
     * </pre>
     */
    long getLeaseExpiry();

    // optional string datum = 2;
    /**
     * <code>optional string datum = 2;</code>
     *
     * <pre>
     * who the lease is for... we can augment the data structure here.
     * </pre>
     */
    boolean hasDatum();
    /**
     * <code>optional string datum = 2;</code>
     *
     * <pre>
     * who the lease is for... we can augment the data structure here.
     * </pre>
     */
    java.lang.String getDatum();
    /**
     * <code>optional string datum = 2;</code>
     *
     * <pre>
     * who the lease is for... we can augment the data structure here.
     * </pre>
     */
    com.google.protobuf.ByteString
        getDatumBytes();

    // optional string lease_owner = 3;
    /**
     * <code>optional string lease_owner = 3;</code>
     *
     * <pre>
     * Who owns the lease? This would be the uuid of the owner.
     * </pre>
     */
    boolean hasLeaseOwner();
    /**
     * <code>optional string lease_owner = 3;</code>
     *
     * <pre>
     * Who owns the lease? This would be the uuid of the owner.
     * </pre>
     */
    java.lang.String getLeaseOwner();
    /**
     * <code>optional string lease_owner = 3;</code>
     *
     * <pre>
     * Who owns the lease? This would be the uuid of the owner.
     * </pre>
     */
    com.google.protobuf.ByteString
        getLeaseOwnerBytes();
  }
  /**
   * Protobuf type {@code ohmdb.flease.Lease}
   */
  public static final class Lease extends
      com.google.protobuf.GeneratedMessage
      implements LeaseOrBuilder {
    // Use Lease.newBuilder() to construct.
    private Lease(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Lease(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Lease defaultInstance;
    public static Lease getDefaultInstance() {
      return defaultInstance;
    }

    public Lease getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Lease(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              leaseExpiry_ = input.readInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              datum_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              leaseOwner_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ohmdb.flease.Flease.internal_static_ohmdb_flease_Lease_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ohmdb.flease.Flease.internal_static_ohmdb_flease_Lease_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ohmdb.flease.Flease.Lease.class, ohmdb.flease.Flease.Lease.Builder.class);
    }

    public static com.google.protobuf.Parser<Lease> PARSER =
        new com.google.protobuf.AbstractParser<Lease>() {
      public Lease parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Lease(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Lease> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 lease_expiry = 1;
    public static final int LEASE_EXPIRY_FIELD_NUMBER = 1;
    private long leaseExpiry_;
    /**
     * <code>optional int64 lease_expiry = 1;</code>
     *
     * <pre>
     * The millis time which this lease expires at.
     * </pre>
     */
    public boolean hasLeaseExpiry() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 lease_expiry = 1;</code>
     *
     * <pre>
     * The millis time which this lease expires at.
     * </pre>
     */
    public long getLeaseExpiry() {
      return leaseExpiry_;
    }

    // optional string datum = 2;
    public static final int DATUM_FIELD_NUMBER = 2;
    private java.lang.Object datum_;
    /**
     * <code>optional string datum = 2;</code>
     *
     * <pre>
     * who the lease is for... we can augment the data structure here.
     * </pre>
     */
    public boolean hasDatum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string datum = 2;</code>
     *
     * <pre>
     * who the lease is for... we can augment the data structure here.
     * </pre>
     */
    public java.lang.String getDatum() {
      java.lang.Object ref = datum_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          datum_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string datum = 2;</code>
     *
     * <pre>
     * who the lease is for... we can augment the data structure here.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDatumBytes() {
      java.lang.Object ref = datum_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        datum_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string lease_owner = 3;
    public static final int LEASE_OWNER_FIELD_NUMBER = 3;
    private java.lang.Object leaseOwner_;
    /**
     * <code>optional string lease_owner = 3;</code>
     *
     * <pre>
     * Who owns the lease? This would be the uuid of the owner.
     * </pre>
     */
    public boolean hasLeaseOwner() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string lease_owner = 3;</code>
     *
     * <pre>
     * Who owns the lease? This would be the uuid of the owner.
     * </pre>
     */
    public java.lang.String getLeaseOwner() {
      java.lang.Object ref = leaseOwner_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          leaseOwner_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string lease_owner = 3;</code>
     *
     * <pre>
     * Who owns the lease? This would be the uuid of the owner.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLeaseOwnerBytes() {
      java.lang.Object ref = leaseOwner_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        leaseOwner_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      leaseExpiry_ = 0L;
      datum_ = "";
      leaseOwner_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, leaseExpiry_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getDatumBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getLeaseOwnerBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, leaseExpiry_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getDatumBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getLeaseOwnerBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ohmdb.flease.Flease.Lease parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ohmdb.flease.Flease.Lease parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ohmdb.flease.Flease.Lease parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ohmdb.flease.Flease.Lease parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ohmdb.flease.Flease.Lease parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ohmdb.flease.Flease.Lease parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ohmdb.flease.Flease.Lease parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ohmdb.flease.Flease.Lease parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ohmdb.flease.Flease.Lease parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ohmdb.flease.Flease.Lease parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ohmdb.flease.Flease.Lease prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ohmdb.flease.Lease}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ohmdb.flease.Flease.LeaseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_Lease_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_Lease_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ohmdb.flease.Flease.Lease.class, ohmdb.flease.Flease.Lease.Builder.class);
      }

      // Construct using ohmdb.flease.Flease.Lease.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        leaseExpiry_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        datum_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        leaseOwner_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_Lease_descriptor;
      }

      public ohmdb.flease.Flease.Lease getDefaultInstanceForType() {
        return ohmdb.flease.Flease.Lease.getDefaultInstance();
      }

      public ohmdb.flease.Flease.Lease build() {
        ohmdb.flease.Flease.Lease result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ohmdb.flease.Flease.Lease buildPartial() {
        ohmdb.flease.Flease.Lease result = new ohmdb.flease.Flease.Lease(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.leaseExpiry_ = leaseExpiry_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.datum_ = datum_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.leaseOwner_ = leaseOwner_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ohmdb.flease.Flease.Lease) {
          return mergeFrom((ohmdb.flease.Flease.Lease)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ohmdb.flease.Flease.Lease other) {
        if (other == ohmdb.flease.Flease.Lease.getDefaultInstance()) return this;
        if (other.hasLeaseExpiry()) {
          setLeaseExpiry(other.getLeaseExpiry());
        }
        if (other.hasDatum()) {
          bitField0_ |= 0x00000002;
          datum_ = other.datum_;
          onChanged();
        }
        if (other.hasLeaseOwner()) {
          bitField0_ |= 0x00000004;
          leaseOwner_ = other.leaseOwner_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ohmdb.flease.Flease.Lease parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ohmdb.flease.Flease.Lease) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 lease_expiry = 1;
      private long leaseExpiry_ ;
      /**
       * <code>optional int64 lease_expiry = 1;</code>
       *
       * <pre>
       * The millis time which this lease expires at.
       * </pre>
       */
      public boolean hasLeaseExpiry() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 lease_expiry = 1;</code>
       *
       * <pre>
       * The millis time which this lease expires at.
       * </pre>
       */
      public long getLeaseExpiry() {
        return leaseExpiry_;
      }
      /**
       * <code>optional int64 lease_expiry = 1;</code>
       *
       * <pre>
       * The millis time which this lease expires at.
       * </pre>
       */
      public Builder setLeaseExpiry(long value) {
        bitField0_ |= 0x00000001;
        leaseExpiry_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 lease_expiry = 1;</code>
       *
       * <pre>
       * The millis time which this lease expires at.
       * </pre>
       */
      public Builder clearLeaseExpiry() {
        bitField0_ = (bitField0_ & ~0x00000001);
        leaseExpiry_ = 0L;
        onChanged();
        return this;
      }

      // optional string datum = 2;
      private java.lang.Object datum_ = "";
      /**
       * <code>optional string datum = 2;</code>
       *
       * <pre>
       * who the lease is for... we can augment the data structure here.
       * </pre>
       */
      public boolean hasDatum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string datum = 2;</code>
       *
       * <pre>
       * who the lease is for... we can augment the data structure here.
       * </pre>
       */
      public java.lang.String getDatum() {
        java.lang.Object ref = datum_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          datum_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string datum = 2;</code>
       *
       * <pre>
       * who the lease is for... we can augment the data structure here.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDatumBytes() {
        java.lang.Object ref = datum_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          datum_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string datum = 2;</code>
       *
       * <pre>
       * who the lease is for... we can augment the data structure here.
       * </pre>
       */
      public Builder setDatum(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        datum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string datum = 2;</code>
       *
       * <pre>
       * who the lease is for... we can augment the data structure here.
       * </pre>
       */
      public Builder clearDatum() {
        bitField0_ = (bitField0_ & ~0x00000002);
        datum_ = getDefaultInstance().getDatum();
        onChanged();
        return this;
      }
      /**
       * <code>optional string datum = 2;</code>
       *
       * <pre>
       * who the lease is for... we can augment the data structure here.
       * </pre>
       */
      public Builder setDatumBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        datum_ = value;
        onChanged();
        return this;
      }

      // optional string lease_owner = 3;
      private java.lang.Object leaseOwner_ = "";
      /**
       * <code>optional string lease_owner = 3;</code>
       *
       * <pre>
       * Who owns the lease? This would be the uuid of the owner.
       * </pre>
       */
      public boolean hasLeaseOwner() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string lease_owner = 3;</code>
       *
       * <pre>
       * Who owns the lease? This would be the uuid of the owner.
       * </pre>
       */
      public java.lang.String getLeaseOwner() {
        java.lang.Object ref = leaseOwner_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          leaseOwner_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string lease_owner = 3;</code>
       *
       * <pre>
       * Who owns the lease? This would be the uuid of the owner.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLeaseOwnerBytes() {
        java.lang.Object ref = leaseOwner_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          leaseOwner_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string lease_owner = 3;</code>
       *
       * <pre>
       * Who owns the lease? This would be the uuid of the owner.
       * </pre>
       */
      public Builder setLeaseOwner(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        leaseOwner_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string lease_owner = 3;</code>
       *
       * <pre>
       * Who owns the lease? This would be the uuid of the owner.
       * </pre>
       */
      public Builder clearLeaseOwner() {
        bitField0_ = (bitField0_ & ~0x00000004);
        leaseOwner_ = getDefaultInstance().getLeaseOwner();
        onChanged();
        return this;
      }
      /**
       * <code>optional string lease_owner = 3;</code>
       *
       * <pre>
       * Who owns the lease? This would be the uuid of the owner.
       * </pre>
       */
      public Builder setLeaseOwnerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        leaseOwner_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ohmdb.flease.Lease)
    }

    static {
      defaultInstance = new Lease(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ohmdb.flease.Lease)
  }

  public interface BallotNumberOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int64 ballot_number = 1;
    /**
     * <code>optional int64 ballot_number = 1;</code>
     *
     * <pre>
     * We use the current time as the ballot number (pg 5).
     * Aka k.t from page 5
     * </pre>
     */
    boolean hasBallotNumber();
    /**
     * <code>optional int64 ballot_number = 1;</code>
     *
     * <pre>
     * We use the current time as the ballot number (pg 5).
     * Aka k.t from page 5
     * </pre>
     */
    long getBallotNumber();

    // optional int64 message_number = 2;
    /**
     * <code>optional int64 message_number = 2;</code>
     *
     * <pre>
     * message number r that is used to distinguish the messages sent by a process within the same interval.
     * </pre>
     */
    boolean hasMessageNumber();
    /**
     * <code>optional int64 message_number = 2;</code>
     *
     * <pre>
     * message number r that is used to distinguish the messages sent by a process within the same interval.
     * </pre>
     */
    long getMessageNumber();

    // optional int64 id = 3;
    /**
     * <code>optional int64 id = 3;</code>
     *
     * <pre>
     * aka k.id from page 5.
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional int64 id = 3;</code>
     *
     * <pre>
     * aka k.id from page 5.
     * </pre>
     */
    long getId();
  }
  /**
   * Protobuf type {@code ohmdb.flease.BallotNumber}
   *
   * <pre>
   * As per page 5
   * </pre>
   */
  public static final class BallotNumber extends
      com.google.protobuf.GeneratedMessage
      implements BallotNumberOrBuilder {
    // Use BallotNumber.newBuilder() to construct.
    private BallotNumber(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BallotNumber(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BallotNumber defaultInstance;
    public static BallotNumber getDefaultInstance() {
      return defaultInstance;
    }

    public BallotNumber getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BallotNumber(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              ballotNumber_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              messageNumber_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              id_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ohmdb.flease.Flease.internal_static_ohmdb_flease_BallotNumber_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ohmdb.flease.Flease.internal_static_ohmdb_flease_BallotNumber_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ohmdb.flease.Flease.BallotNumber.class, ohmdb.flease.Flease.BallotNumber.Builder.class);
    }

    public static com.google.protobuf.Parser<BallotNumber> PARSER =
        new com.google.protobuf.AbstractParser<BallotNumber>() {
      public BallotNumber parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BallotNumber(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BallotNumber> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 ballot_number = 1;
    public static final int BALLOT_NUMBER_FIELD_NUMBER = 1;
    private long ballotNumber_;
    /**
     * <code>optional int64 ballot_number = 1;</code>
     *
     * <pre>
     * We use the current time as the ballot number (pg 5).
     * Aka k.t from page 5
     * </pre>
     */
    public boolean hasBallotNumber() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 ballot_number = 1;</code>
     *
     * <pre>
     * We use the current time as the ballot number (pg 5).
     * Aka k.t from page 5
     * </pre>
     */
    public long getBallotNumber() {
      return ballotNumber_;
    }

    // optional int64 message_number = 2;
    public static final int MESSAGE_NUMBER_FIELD_NUMBER = 2;
    private long messageNumber_;
    /**
     * <code>optional int64 message_number = 2;</code>
     *
     * <pre>
     * message number r that is used to distinguish the messages sent by a process within the same interval.
     * </pre>
     */
    public boolean hasMessageNumber() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 message_number = 2;</code>
     *
     * <pre>
     * message number r that is used to distinguish the messages sent by a process within the same interval.
     * </pre>
     */
    public long getMessageNumber() {
      return messageNumber_;
    }

    // optional int64 id = 3;
    public static final int ID_FIELD_NUMBER = 3;
    private long id_;
    /**
     * <code>optional int64 id = 3;</code>
     *
     * <pre>
     * aka k.id from page 5.
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 id = 3;</code>
     *
     * <pre>
     * aka k.id from page 5.
     * </pre>
     */
    public long getId() {
      return id_;
    }

    private void initFields() {
      ballotNumber_ = 0L;
      messageNumber_ = 0L;
      id_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, ballotNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, messageNumber_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, id_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, ballotNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, messageNumber_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, id_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ohmdb.flease.Flease.BallotNumber parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ohmdb.flease.Flease.BallotNumber parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ohmdb.flease.Flease.BallotNumber parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ohmdb.flease.Flease.BallotNumber parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ohmdb.flease.Flease.BallotNumber parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ohmdb.flease.Flease.BallotNumber parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ohmdb.flease.Flease.BallotNumber parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ohmdb.flease.Flease.BallotNumber parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ohmdb.flease.Flease.BallotNumber parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ohmdb.flease.Flease.BallotNumber parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ohmdb.flease.Flease.BallotNumber prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ohmdb.flease.BallotNumber}
     *
     * <pre>
     * As per page 5
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ohmdb.flease.Flease.BallotNumberOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_BallotNumber_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_BallotNumber_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ohmdb.flease.Flease.BallotNumber.class, ohmdb.flease.Flease.BallotNumber.Builder.class);
      }

      // Construct using ohmdb.flease.Flease.BallotNumber.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        ballotNumber_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        messageNumber_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ohmdb.flease.Flease.internal_static_ohmdb_flease_BallotNumber_descriptor;
      }

      public ohmdb.flease.Flease.BallotNumber getDefaultInstanceForType() {
        return ohmdb.flease.Flease.BallotNumber.getDefaultInstance();
      }

      public ohmdb.flease.Flease.BallotNumber build() {
        ohmdb.flease.Flease.BallotNumber result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ohmdb.flease.Flease.BallotNumber buildPartial() {
        ohmdb.flease.Flease.BallotNumber result = new ohmdb.flease.Flease.BallotNumber(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.ballotNumber_ = ballotNumber_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.messageNumber_ = messageNumber_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.id_ = id_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ohmdb.flease.Flease.BallotNumber) {
          return mergeFrom((ohmdb.flease.Flease.BallotNumber)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ohmdb.flease.Flease.BallotNumber other) {
        if (other == ohmdb.flease.Flease.BallotNumber.getDefaultInstance()) return this;
        if (other.hasBallotNumber()) {
          setBallotNumber(other.getBallotNumber());
        }
        if (other.hasMessageNumber()) {
          setMessageNumber(other.getMessageNumber());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ohmdb.flease.Flease.BallotNumber parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ohmdb.flease.Flease.BallotNumber) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 ballot_number = 1;
      private long ballotNumber_ ;
      /**
       * <code>optional int64 ballot_number = 1;</code>
       *
       * <pre>
       * We use the current time as the ballot number (pg 5).
       * Aka k.t from page 5
       * </pre>
       */
      public boolean hasBallotNumber() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 ballot_number = 1;</code>
       *
       * <pre>
       * We use the current time as the ballot number (pg 5).
       * Aka k.t from page 5
       * </pre>
       */
      public long getBallotNumber() {
        return ballotNumber_;
      }
      /**
       * <code>optional int64 ballot_number = 1;</code>
       *
       * <pre>
       * We use the current time as the ballot number (pg 5).
       * Aka k.t from page 5
       * </pre>
       */
      public Builder setBallotNumber(long value) {
        bitField0_ |= 0x00000001;
        ballotNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 ballot_number = 1;</code>
       *
       * <pre>
       * We use the current time as the ballot number (pg 5).
       * Aka k.t from page 5
       * </pre>
       */
      public Builder clearBallotNumber() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ballotNumber_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 message_number = 2;
      private long messageNumber_ ;
      /**
       * <code>optional int64 message_number = 2;</code>
       *
       * <pre>
       * message number r that is used to distinguish the messages sent by a process within the same interval.
       * </pre>
       */
      public boolean hasMessageNumber() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 message_number = 2;</code>
       *
       * <pre>
       * message number r that is used to distinguish the messages sent by a process within the same interval.
       * </pre>
       */
      public long getMessageNumber() {
        return messageNumber_;
      }
      /**
       * <code>optional int64 message_number = 2;</code>
       *
       * <pre>
       * message number r that is used to distinguish the messages sent by a process within the same interval.
       * </pre>
       */
      public Builder setMessageNumber(long value) {
        bitField0_ |= 0x00000002;
        messageNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 message_number = 2;</code>
       *
       * <pre>
       * message number r that is used to distinguish the messages sent by a process within the same interval.
       * </pre>
       */
      public Builder clearMessageNumber() {
        bitField0_ = (bitField0_ & ~0x00000002);
        messageNumber_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 id = 3;
      private long id_ ;
      /**
       * <code>optional int64 id = 3;</code>
       *
       * <pre>
       * aka k.id from page 5.
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 id = 3;</code>
       *
       * <pre>
       * aka k.id from page 5.
       * </pre>
       */
      public long getId() {
        return id_;
      }
      /**
       * <code>optional int64 id = 3;</code>
       *
       * <pre>
       * aka k.id from page 5.
       * </pre>
       */
      public Builder setId(long value) {
        bitField0_ |= 0x00000004;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 id = 3;</code>
       *
       * <pre>
       * aka k.id from page 5.
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        id_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ohmdb.flease.BallotNumber)
    }

    static {
      defaultInstance = new BallotNumber(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ohmdb.flease.BallotNumber)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ohmdb_flease_FleaseRequestMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ohmdb_flease_FleaseRequestMessage_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ohmdb_flease_FleaseReplyMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ohmdb_flease_FleaseReplyMessage_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ohmdb_flease_Lease_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ohmdb_flease_Lease_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ohmdb_flease_BallotNumber_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ohmdb_flease_BallotNumber_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014flease.proto\022\014ohmdb.flease\"\335\001\n\024FleaseR" +
      "equestMessage\022\020\n\010lease_id\030\001 \001(\t\022D\n\014messa" +
      "ge_type\030\003 \001(\0162..ohmdb.flease.FleaseReque" +
      "stMessage.MessageType\022%\n\001k\030\004 \001(\0132\032.ohmdb" +
      ".flease.BallotNumber\022\"\n\005lease\030\005 \001(\0132\023.oh" +
      "mdb.flease.Lease\"\"\n\013MessageType\022\010\n\004READ\020" +
      "\000\022\t\n\005WRITE\020\001\"\250\002\n\022FleaseReplyMessage\022\020\n\010l" +
      "ease_id\030\001 \001(\t\022B\n\014message_type\030\003 \001(\0162,.oh" +
      "mdb.flease.FleaseReplyMessage.MessageTyp" +
      "e\022\"\n\005lease\030\004 \001(\0132\023.ohmdb.flease.Lease\022%\n",
      "\001k\030\005 \001(\0132\032.ohmdb.flease.BallotNumber\022*\n\006" +
      "kprime\030\006 \001(\0132\032.ohmdb.flease.BallotNumber" +
      "\"E\n\013MessageType\022\013\n\007ackREAD\020\001\022\014\n\010nackREAD" +
      "\020\002\022\014\n\010ackWRITE\020\003\022\r\n\tnackWRITE\020\004\"A\n\005Lease" +
      "\022\024\n\014lease_expiry\030\001 \001(\003\022\r\n\005datum\030\002 \001(\t\022\023\n" +
      "\013lease_owner\030\003 \001(\t\"I\n\014BallotNumber\022\025\n\rba" +
      "llot_number\030\001 \001(\003\022\026\n\016message_number\030\002 \001(" +
      "\003\022\n\n\002id\030\003 \001(\003B\020\n\014ohmdb.fleaseH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_ohmdb_flease_FleaseRequestMessage_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_ohmdb_flease_FleaseRequestMessage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ohmdb_flease_FleaseRequestMessage_descriptor,
              new java.lang.String[] { "LeaseId", "MessageType", "K", "Lease", });
          internal_static_ohmdb_flease_FleaseReplyMessage_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_ohmdb_flease_FleaseReplyMessage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ohmdb_flease_FleaseReplyMessage_descriptor,
              new java.lang.String[] { "LeaseId", "MessageType", "Lease", "K", "Kprime", });
          internal_static_ohmdb_flease_Lease_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_ohmdb_flease_Lease_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ohmdb_flease_Lease_descriptor,
              new java.lang.String[] { "LeaseExpiry", "Datum", "LeaseOwner", });
          internal_static_ohmdb_flease_BallotNumber_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_ohmdb_flease_BallotNumber_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ohmdb_flease_BallotNumber_descriptor,
              new java.lang.String[] { "BallotNumber", "MessageNumber", "Id", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
